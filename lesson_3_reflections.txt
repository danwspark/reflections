Caching Github password in Git
https://help.github.com/articles/caching-your-github-password-in-git/

		git remote
			this command with no arguments shows available remote repos

		git remote -v
			-v stands for 'verbose' more info.

		git remote add <name> <url>
			add a repo & name it. origin is typically the standard name

		git clone <url> 
			automatically sets up the remotes.

		git push <remote to send to> <name of local branch to push>
 
    	git push --set-upstream origin master
    		To push the current branch and set the remote as upstream

When would you want to use a remote repository rather than keeping all your work local?

    Sharing work is easier. Easier to work on same work away from home computers. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
	

    similar reasons as before. Major changes & logical development steps should be left to the discretion of the user. 

Describe the differences between forks, clones, and branches.  When would you use one instead of another?
	
	Forks is a clone made on the github servers. More features: keep track of number of people who have made forks. Easier to suggest changes to the original

		click fork on the github page. cloning process is identical

    
    Branches happen inside a single repo

    clone: can be remote or local. make an exact copy of an existing repo

    Use forks to get code from existing repos on Github. Clone to share repos from github that you want to edit, whether by yourself or with others. Branches used when making changes on existing repos.

    	go to settings on repo page settings -> collaborators


What is the benefit of having a copy of the last known state of the remote stored locally?
	
	Benefit is being able to compare between remote and current, and using this to determine whether fast merge is possible.

		When git pushes/pulls, a local copy of the last known position of remotes' ('s) branches. 

		git fetch <remote name>
			gets a copy of the remote's commits, but leaves the local copy alone. does not try merge
			Actually, git pull is this: a fetch then merge.

		git log origin/master --AKA git log <remote>/<branch>
			after fetching, this will examine the log of just the fetched branch

		git diff origin/master master 
			see explanation above

    

How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?
		
	without? use email to send code over. trial and error to find changes.
	Probably won't be easier in any way.. harder bc can't see differences at all lol

		To collaborate: Make a branch of experimental change on local machine, then push to github. This ensures master isn't broken. Use pull request to collaborate
    

When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?

   -Branch better when the change is experimental, and has potential to break master
   -When collaborating with many other people in professional environments when code review is imporant
   -more eyes looking at code means less room for error

   -Directly to master is better when the change is small, with few people collaborating where changes made can be directly and easily communicated with.
   -is faster

    	one way to fix merge conflicts between pull requests:
    	merge one first if it works. close. This creates a seperate commit: no fast forward merges here.    	
    	got to the one with conflict, change in the computer.
    	-First pull the new master to local computer
    	-Fix the problem on the local branch
    	-Merge master into local branch (NOT just merge branch into master and push)
    	-push this change to github pull request


Solve merge conflicts in pull request:
	Situation: 
	-Fork project, then clone to local
	-on local make change, push to fork, make pull request. but bad; merge conflict. maybe someone else made changes while you were away?

	Solution:
	-Get new master from project into local machine. Do via new remote. Most call this remote 'upstream'. Pull the most-up to date master.
		-This pull will create a "upstream/master" branch on local
	-merge local change branch with upstream master
	-push local master and change branch to fork (local master doesn't HAVE to be pushed)
	

Further Documentation
http://git-scm.com/doc
--the external links are really good

http://git-scm.com/docs/gittutorial
--git provided tutorials

--good tutorials
http://www-cs-students.stanford.edu/~blynn/gitmagic/index.html
http://rypress.com/tutorials/git/index

Todo: 
go back, learn to read man pages
